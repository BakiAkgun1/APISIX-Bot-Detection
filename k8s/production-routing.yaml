# üéØ PRODUCTION ROUTING YAPILANDIRMASI
# Priority Sƒ±rasƒ±: JWT Decode (1000) > IP Whitelist (200) > JWT Bot (170) > Bot User-Agent (100) > JWT Admin (80) > Username (70) > Normal (50)

# 1Ô∏è‚É£ JWT Decode Route - Test endpoint i√ßin
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: jwt-decode-route
  namespace: default
  annotations:
    kubernetes.io/ingress.class: apisix
spec:
  http:
  - name: jwt-decode-test
    priority: 1000  # En y√ºksek priority
    match:
      hosts:
      - "*"
      paths:
      - "/jwt-decode"
      - "/api/test"
    backends:
    - serviceName: portal-svc
      servicePort: 80
    plugins:
    - name: serverless-pre-function
      enable: true
      config:
        phase: access
        functions:
        - |
          return function(conf, ctx)
            local core = require('apisix.core')
            local jwt = require('resty.jwt')
            
            local token = core.request.header(ctx, 'authorization')
            if not token then
              core.response.exit(400, {
                success = false,
                message = 'No JWT token found',
                timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ')
              })
              return
            end
            
            token = string.gsub(token, '^Bearer ', '')
            token = string.gsub(token, '^bearer ', '')
            
            local jwt_obj = jwt:load_jwt(token)
            if not jwt_obj or not jwt_obj.valid or not jwt_obj.payload then
              core.response.exit(400, {
                success = false,
                message = 'Invalid JWT token',
                timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ')
              })
              return
            end
            
            local payload = jwt_obj.payload
            local username = payload.name or payload.username or 'unknown'
            local sub = payload.sub or 'unknown'
            local admin = payload.admin or false
            
            -- Bot user listesi
            local bot_users = {
              ['bot_user'] = true,
              ['testuser'] = true, 
              ['admin_user'] = true,
              ['bot'] = true
            }
            
            local user_type = 'normal'
            local is_bot = false
            
            if bot_users[username] or bot_users[sub] then
              user_type = 'bot'
              is_bot = true
            end
            
            core.response.exit(200, {
              success = true,
              message = 'JWT Token Decoded Successfully',
              timestamp = os.date('!%Y-%m-%dT%H:%M:%SZ'),
              user_type = user_type,
              is_bot = is_bot,
              jwt_decoded = {
                username = username,
                subject = sub,
                admin = admin,
                issued_at = payload.iat or 'unknown',
                expires_at = payload.exp or 'unknown'
              },
              routing_decision = {
                target_service = is_bot and 'portal-svc-bot' or 'portal-svc',
                target_page = is_bot and 'Bot Page (Red)' or 'Normal Page (Green)'
              }
            })
          end

---
# 2Ô∏è‚É£ IP Whitelist Route (Priority: 200)
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: portal-ip-whitelist-route
  namespace: default
  annotations:
    kubernetes.io/ingress.class: apisix
spec:
  http:
  - name: ip-whitelist-traffic
    priority: 200
    match:
      hosts:
      - "*"
      paths:
      - "/*"
      exprs:
      - subject:
          scope: Header
          name: X-Forwarded-For
        op: RegexMatch
        value: "^(192\\.168\\.1\\.(100|101|102|103))$"
    backends:
    - serviceName: portal-svc-bot
      servicePort: 80
    plugins:
    - name: limit-count
      enable: true
      config:
        count: 2
        time_window: 60
        key: "remote_addr"
        rejected_code: 429

---
# 3Ô∏è‚É£ Bot User-Agent Route (Priority: 100)
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: portal-bot-route
  namespace: default
  annotations:
    kubernetes.io/ingress.class: apisix
spec:
  http:
  - name: bot-traffic
    priority: 100
    match:
      hosts:
      - "*"
      paths:
      - "/*"
      exprs:
      - subject:
          scope: Header
          name: User-Agent
        op: Equal
        value: "Bot"
    backends:
    - serviceName: portal-svc-bot
      servicePort: 80
    plugins:
    - name: limit-count
      enable: true
      config:
        count: 2
        time_window: 60
        key: "remote_addr"
        rejected_code: 429

---
# 4Ô∏è‚É£ Normal Traffic Route (Priority: 50)
apiVersion: apisix.apache.org/v2
kind: ApisixRoute
metadata:
  name: portal-normal-route
  namespace: default
  annotations:
    kubernetes.io/ingress.class: apisix
spec:
  http:
  - name: normal-traffic
    priority: 50
    match:
      hosts:
      - "*"
      paths:
      - "/*"
    backends:
    - serviceName: portal-svc
      servicePort: 80
    plugins:
    - name: limit-count
      enable: true
      config:
        count: 100
        time_window: 60
        key: "remote_addr"
        rejected_code: 429
